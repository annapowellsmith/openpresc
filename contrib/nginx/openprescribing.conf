upstream hello_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/webapps/openprescribing/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 443;
    server_name deploy.openprescribing.net;

    ssl on;
    ssl_certificate     /etc/nginx/certificates/certificate-307708.crt;
    ssl_certificate_key /etc/nginx/certificates/myserver.key;

    client_max_body_size 4G;

    access_log /webapps/openprescribing/logs/nginx-access.log;
    error_log /webapps/openprescribing/logs/nginx-error.log;

    location /static/ {
        alias   /webapps/openprescribing/openprescribing/static/;
    }

    location /media/ {
        alias   /webapps/openprescribing/openprescribing/media/;
    }

    location /labs/outlier_reports/ {
        alias /mnt/volume-fra1-02/openprescribing-data/outlier_reports;
    }

    ## Deny illegal Host headers
    if ($host !~* ^(openprescribing.net|www.openprescribing.net|openprescriptions.net|www.openprescriptions.net|deploy.openprescribing.net)$ ) {
        return 444;
    }

    location / {
        proxy_pass http://hello_app_server;
        proxy_read_timeout 120s;

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;
    }

    error_page 500 502 504 /500.html;
    location = /500.html {
        root /webapps/openprescribing/openprescribing/static/;
    }
}
