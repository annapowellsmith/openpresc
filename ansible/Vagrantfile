# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # define the box
    config.vm.box = "debian/contrib-stretch64"

    config.vm.hostname = "openprescribing"

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine.
    config.vm.network :forwarded_port, host: 3333, guest: 8000
    # Required for NFS to work, pick any local IP
    config.vm.network :private_network, ip: '192.168.50.50'

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"
    # config.vm.network "private_network", type: "dhcp"

    config.vm.boot_timeout = 500

    # If true, then any SSH connections made will enable agent forwarding.
    # Default value: false
    config.ssh.forward_agent = true

    # Set up synced folders. Use NFS for shared folders for better
    # performance
    config.vm.synced_folder "../", "/openprescribing", nfs: true

    config.vm.provider :virtualbox do |vb|
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    end

    # ansible provisioning
    config.vm.provision "ansible_local" do |ansible|
      ansible.pip_install_cmd = "curl https://bootstrap.pypa.io/get-pip.py | sudo python"
      ansible.install_mode = "pip_args_only"
      ansible.pip_args = "-r /openprescribing/ansible/vagrant_requirements.txt"
      ansible.playbook = "vagrant.yml"
      ansible.verbose = "vv"
    end

    config.vm.provider "virtualbox" do |v|
      # Use a quarter of available RAM
      # Code from https://stefanwrobel.com/how-to-make-vagrant-performance-not-suck
      host = RbConfig::CONFIG['host_os']

      # Give VM 1/4 system memory
      if host =~ /darwin/
        # sysctl returns Bytes and we need to convert to MB
        mem = `sysctl -n hw.memsize`.to_i / 1024
      elsif host =~ /linux/
        # meminfo shows KB and we need to convert to MB
        mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i
      elsif host =~ /mswin|mingw|cygwin/
        # Windows code via https://github.com/rdsubhas/vagrant-faster
        mem = `wmic computersystem Get TotalPhysicalMemory`.split[1].to_i / 1024
      end

      mem = mem / 1024 / 4
      v.customize ["modifyvm", :id, "--memory", mem]
    end
end
